// @author: Zackary Frazier
// @last modified: 7/12/2021
// @desc : 
//   This is the trigger handler class for SoldMerchandise


public class SoldMerchandiseTriggerHandler {
    
    // @desc : helper function, grabs all IDs from merchandise before insert
    private static List<ID> getInventoryIds(List<Sold_Merchandise__c> merchList) {
        List<ID> inv = new List<ID>();
        for(Sold_Merchandise__c merch: merchList) {
            inv.add(merch.Inventory_Item__c);
        }
        return inv;
    }
    
    // @desc : helper function, search a list of merch and find the one whose id matches the one specified
    private static Sold_Merchandise__c findMerchById(List<Sold_Merchandise__c> merchList, ID merchId) {
        for(Sold_Merchandise__c merch: merchList) {
            if(merch.id == merchId) {
                return merch;
            }
        }
        return null;
    }
    
    // @desc : helper function, search a list of inventory items and find the one associated with a merch. item
    private static Inventory_Item__c findItemById(List<Inventory_Item__c> itemList, Sold_Merchandise__c merch) {
        for(Inventory_Item__c item: itemList) {
            if(merch.Inventory_Item__c == item.id) {
                return item;
            }
        }
        return null;
    }
    
    // @desc: set the unit price on each piece of merch.
    public static void setUnitPrice(List<Sold_Merchandise__c> merchList) {
        List<ID> invIds = getInventoryIds(merchList);
        List<Inventory_Item__c> inventoryItems = [SELECT Price__c, id FROM Inventory_Item__c WHERE id IN :invIds];
        
		
        for(Sold_Merchandise__c merch: merchList) {
            for(Inventory_Item__c item: inventoryItems) {
                if(item.id == merch.Inventory_Item__c) {
                    Double unitPrice = item.Price__c;
                    merch.Unit_Price__c = unitPrice;
                }
            }
        }
    }
    
    // @desc : ensure before a sale that there is sufficient merchandise to be sold
	public static void ensureQuantityBeforeSale(List<Sold_Merchandise__c> merchList) {
        List<ID> invIds = getInventoryIds(merchList);
        List<Inventory_Item__c> inventoryItems = [SELECT Price__c, id, Quantity__c FROM Inventory_Item__c WHERE id IN :invIds];
        
        // ensure quantity is a valid value
        for(Sold_Merchandise__c merch: merchList) {
            if(merch.Quantity__c <= 0) {
                merch.addError('Cannot have a quantity less than or equal to zero');
            }    
        }
        
        for(Sold_Merchandise__c merch: merchList) {
            for(Inventory_Item__c item: inventoryItems) {
                if(item.id == merch.Inventory_Item__c) {
                    if(item.Quantity__c < merch.Quantity__c) {
                        merch.addError('Insufficient merchandise in stock');
                    }
                }
            }
        }
    }
    
    // @desc : ensure before a sale that there is sufficient merchandise to be sold
	public static void ensureQuantityBeforeUpdate(List<Sold_Merchandise__c> newMerchList, List<Sold_Merchandise__c> oldMerchList) {
        List<ID> invIds = getInventoryIds(newMerchList);
        List<Inventory_Item__c> inventoryItems = [SELECT Price__c, id, Quantity__c FROM Inventory_Item__c WHERE id IN :invIds];
        
        // ensure quantity is a valid value
        for(Sold_Merchandise__c newMerch: newMerchList) {
            Sold_Merchandise__c oldMerch = findMerchById(oldMerchList, newMerch.id);
            if(newMerch.Quantity__c < 0) {
                newMerch.addError('Cannot have a quantity less than zero');
            } else if(newMerch.Quantity__c > oldMerch.Quantity__c) {
                newMerch.addError('Updating merch quantity can only be done for refunds');
            }
        }
    }
    
    // @desc : update the inventory after a sale has been made
    public static void updateInventoryAfterSale(List<Sold_Merchandise__c> merchList) {
        
        // get list of inventory items
        List<ID> itemIds = getInventoryIds(merchList);
        List<Inventory_Item__c> itemsList = [SELECT Quantity__c, Id FROM Inventory_Item__c WHERE id IN :itemIds];
        
        for(Sold_Merchandise__c merch: merchList) {
            for(Inventory_Item__c item : itemsList) {
                if(item.Id == merch.Inventory_Item__c) {
                    item.Quantity__c -= merch.Quantity__c;
                }
            }
        }
        update itemsList;
        
    }
    
    public static void updateInventoryAfterUpdate(List<Sold_Merchandise__c> newMerchList, List<Sold_Merchandise__c> oldMerchList) {
        
        // get list of inventory items
        List<ID> itemIds = getInventoryIds(newMerchList);
        List<Inventory_Item__c> itemsList = [SELECT Quantity__c, Id FROM Inventory_Item__c WHERE id IN :itemIds];
        
        for(Sold_Merchandise__c newMerch: newMerchList) {
            Sold_Merchandise__c oldMerch = findMerchById(oldMerchList, newMerch.id);
            Decimal quantLoss = oldMerch.Quantity__c - newMerch.Quantity__c;
            Inventory_Item__c item = findItemById(itemsList, newMerch);
            item.Quantity__c += quantLoss;
        }
        update itemsList;
        
    }
}