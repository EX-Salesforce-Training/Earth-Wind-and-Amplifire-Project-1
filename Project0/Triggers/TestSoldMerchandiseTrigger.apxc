// @Author: Zackary Frazier
// @last modified: 7/13/2021
// @desc:
//    a series of test methods for the sold merchandise trigger

@isTest
public class TestSoldMerchandiseTrigger {
	
    // @desc : ensure that the unit price of the sold merch is updated after insertion
    @isTest 
    static void testUpdateUnitPrice() {
        TestSoldMerchandiseTriggerUtil utility = new TestSoldMerchandiseTriggerUtil();
        Database.SaveResult sr = utility.addSoldMerch(10);
        
        System.assert(sr.isSuccess());
        System.assert(sr.getErrors().isEmpty());
        
        // should really only be one
        List<Sold_Merchandise__c> merchList = [SELECT Unit_Price__c FROM Sold_Merchandise__c WHERE id = :sr.id];
        for(Sold_Merchandise__c merch: merchList) {
            System.assertEquals(utility.defaultUnitPrice, merch.Unit_Price__c);
        }
        utility.destroyTestData();
    }
    
    // @desc : test to ensure you can't create merch with a negative quantity
    @isTest
    static void testEnsureQuantityBeforeSaleNegativeQuantity() {
        TestSoldMerchandiseTriggerUtil utility = new TestSoldMerchandiseTriggerUtil();
        Database.SaveResult sr = utility.addSoldMerch(-5);
        
        System.assert(!sr.isSuccess());
        
        utility.destroyTestData();
    }
    
    // @desc : test to ensure you can't sell more merch than you have
    @isTest
    static void testEnsureQuantityBeforeSale() {
        TestSoldMerchandiseTriggerUtil utility = new TestSoldMerchandiseTriggerUtil();
        Database.SaveResult sr = utility.addSoldMerch(25);
        
        System.assert(!sr.isSuccess());
        
        utility.destroyTestData();
    }
    
    // @desc : test that the inventory is updated after a sale correctly
    @isTest
    static void testUpateInventoryAfterSale() {
		TestSoldMerchandiseTriggerUtil utility = new TestSoldMerchandiseTriggerUtil();
        // it's literally just the one
        Inventory_Item__c item = [SELECT Quantity__c FROM Inventory_Item__c WHERE Id = :utility.itemId][0];
        Double originalQuantity = item.Quantity__c;
        Double amountSold = 3;
        
        Database.SaveResult sr = utility.addSoldMerch(amountSold);
        System.assert(sr.isSuccess());
        item = [SELECT Quantity__c FROM Inventory_Item__c WHERE Id = :utility.itemId][0];
        Double newQuantity = item.Quantity__c;
        System.assertEquals(originalQuantity - amountSold, newQuantity);
        
        utility.destroyTestData();
    }
    
    // @desc : test that the database cannot be updated after a sale
    @isTest
    static void testEnsureQuantityBeforeUpdate() {
        TestSoldMerchandiseTriggerUtil utility = new TestSoldMerchandiseTriggerUtil();
        
        Database.SaveResult srAdd = utility.addSoldMerch(5);
        System.assert(srAdd.isSuccess());
        Sold_Merchandise__c merch = [SELECT Unit_Price__c FROM Sold_Merchandise__c WHERE Id = :srAdd.id][0];
        merch.Unit_Price__c = 10;
        Database.SaveResult srUpdate = Database.update(merch, false);
        System.assert(!srUpdate.isSuccess());

        utility.destroyTestData();
    }
    
    @isTest
    static void testUpdateInventoryAfterUpdate() {
        
    }
}